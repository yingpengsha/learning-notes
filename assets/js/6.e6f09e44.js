(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{178:function(t,a,e){"use strict";e.r(a);var r=e(0),i=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"同源策略及跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同源策略及跨域","aria-hidden":"true"}},[t._v("#")]),t._v(" 同源策略及跨域")]),t._v(" "),e("p",[e("a",{attrs:{name:"lyQiR"}})]),t._v(" "),e("h2",{attrs:{id:"同源策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同源策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),e("p",[t._v("同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。")]),t._v(" "),e("ul",[e("li",[t._v("同源策略，它是由 Netscape 提出的一个著名的安全策略。")]),t._v(" "),e("li",[t._v("现在所有支持 JavaScript 的浏览器都会使用这个策略。")]),t._v(" "),e("li",[t._v("所谓同源是指，域名，协议，端口相同。")]),t._v(" "),e("li",[t._v("如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问。")]),t._v(" "),e("li",[t._v("同源策略是浏览器的行为，是为了保护本地数据不被 JavaScript 代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。")])]),t._v(" "),e("p",[e("a",{attrs:{name:"U4UJ4"}})]),t._v(" "),e("h2",{attrs:{id:"跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域","aria-hidden":"true"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),e("p",[t._v("结合上文同源策略，跨域其实就是不同域之间相互请求资源。")]),t._v(" "),e("p",[t._v("跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。")])])}],!1,null,null,null);a.default=i.exports}}]);